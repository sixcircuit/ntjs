"use strict";

var _ = require('dry-underscore');
var eq = _.test.eq;
var ok = _.test.ok;

var i = 0;
var n = 11;

test("a test of return", function(done){

   (function(cb){
      while (i < n + 4) {
         await { setTimeout (defer (), 10 * Math.random ()); }
         i++;
         if (i == n) {
            cb ();
            return;
         }
      }
   })(function(){
      eq(i, n, "return at right moment");
      done();
   })
});

// -*- mode: javascript; tab-width: 4; c-basic-offset: 4; indent-tabs-mode: nil; -*-

"use strict";

var assert = require ("assert");

function eeStyle (cb) {
    var ret = {};
    setTimeout (function () { ret.slot = 10; cb (); }, 4);
    return ret;
};

var tmp;

exports["test that EventEmitter-type-things works"] = {

    run  : function (cb) {
        await { 
            tmp = eeStyle (defer ());
        }
        cb ();
    },

    check : function () {
        assert.equal (tmp.slot, 10);
    }

};

// -*- mode: javascript; tab-width: 4; c-basic-offset: 4; indent-tabs-mode: nil; -*-

"use strict";

var assert = require ("assert");

var side_effect = 0;

function do_side_effect () {
    side_effect = 1;
    return 10;
};

function foo () {
    await setTimeout (defer (), 2);
    return do_side_effect ();
};

var tmp;

exports["test that return value side effects happen"] = {
    
    run  : function (cb) {
        foo ();
        await setTimeout (defer (), 5);
        cb ();
    },

    check : function () {
        assert.equal (side_effect, 1);
    }

};

// -*- mode: javascript; tab-width: 4; c-basic-offset: 4; indent-tabs-mode: nil; -*-

"use strict";

var assert = require ("assert");

var side_effect = 0;

function do_side_effect () {
    side_effect = 1;
    return 10;
};

function do_unwanted_side_effect () {
    side_effect = 2;
    return 10;
};

function foo () {
    await setTimeout (defer (), 2);
    if (true) {
        return do_side_effect ();
    } else {
        return do_unwanted_side_effect ();
    }
};

var tmp;

exports["test that return value side effects happen"] = {
    
    run  : function (cb) {
        foo ();
        await setTimeout (defer (), 5);
        cb ();
    },

    check : function () {
        assert.equal (side_effect, 1);
    }

};

