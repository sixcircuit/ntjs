"use strict";

var _ = require('dry-underscore');
var eq = _.test.eq;
var ok = _.test.ok;

function MyClass (lim) {
   this._i = 0;
   this._lim = lim;

   this.iter = function () { return this._i; }

   this.next = function (cb) {
      var done = false;
      if (this._i >= this._lim) {
         done = true;
      } else {
         await { setTimeout (defer (), 3 * Math.random ()); }
         this._i ++;
      }
      cb (done);
   };
};

var obj = null;
var n = 30;

test("test of 'this' inside of a tamed class", function(done){

   (function(cb){
      obj = new MyClass (n);
      var done = false;
      while (!done) {
         await { obj.next (defer (done)); }
      }
      cb();
   })(function(){
      eq(obj.iter(), n, "achieved n iterations");
      done();
   });

});

"use strict";

var _ = require('dry-underscore');
var eq = _.test.eq;
var ok = _.test.ok;

var res = 0;
var i = 0;

function Class () {

   this._v = [];

   for (var i = 0; i < 10; i++) { this._v.push (i); }

   this.run = function (cb) {
      this._u = [];
      for (var i in this._v) {
         this._u.push (this._v[i]);
         await { setTimeout (defer (), 10*Math.random ()); }
      }
      cb ();
   };

   this.check = function () {
      return JSON.stringify (this._v) == JSON.stringify (this._u);
   };

};

var obj = new Class ();

test("a test of for (var i in this._foo)", function(done){

   (function(cb){
      await { obj.run (defer ()); }
      cb();
   })(function(){
      ok(obj.check(), "made it through 10 times");
      done();
   });

});
// -*- mode: javascript; tab-width: 4; c-basic-offset: 4; indent-tabs-mode: nil; -*-

"use strict";

var assert = require ("assert");

function MyClass (lim) {
    this._i = 0;
    this._lim = lim;

    this.iter = function () { return this._i; }
    
    this.next = function (cb) {
        var done = false;
        await { setTimeout (defer (), 2 * Math.random ()); }
        do { 
            if (this._i >= this._lim) {
                done = true;
            } else {
                this._i ++;
            }
        } while (0);
        await { setTimeout (defer (), 2 * Math.random ()); }
        cb (done);
    };
};

var obj = null;
var n = 30;

exports["test of 'this' inside of a tamed class"] = {

    run  : function (cb) {
        obj = new MyClass (n);
        var done = false;
        while (!done) {
            await { obj.next (defer (done)); }
        }
        cb ();
    },

    check : function () {
        assert.equal (obj.iter (), n, "achieved n iterations");
    }



};

// -*- mode: javascript; tab-width: 4; c-basic-offset: 4; indent-tabs-mode: nil; -*-

"use strict";

var assert = require ("assert");

var sum = 0;
var i = 0;

function Class () {
    this._stop = false;

    this.run = function (cb) {
	var i = 0;
	var tot = 0;
	while (!this._stop) {
	    await setTimeout (defer(), 1);
	    tot += i;
	    i += 1;
	    if (i >= 10) { this._stop = true; }
	}
	cb (tot);
    };
};

exports["appropriate this translation for tamed while"] = {

    run : function (cb) {
	c = new Class ();
	await c.run (defer (res));
	cb();
    },

    check : function () {
	assert.equal (res, 45, "loop broke");
    }

};
