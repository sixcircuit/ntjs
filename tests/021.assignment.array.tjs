"use strict";

var { _, eq, ok, timer, async } = require('./common.js');

const _n = 10;
const expected_x = _.map(_.range(_n), function(v){ return(v); });
const expected_y = _.map(_.range(_n), function(v){ return(v*2); });
const expected_x_raw = _.map(_.range(_n), function(v){ return([ v, v*2 ]); });

function expected(x, y, done){ eq(x, expected_x); eq(y, expected_y); if(done){ done(); } }
function expected_raw(x, done){ eq(x, expected_x_raw); if(done){ done(); } }

test("array notation simple var", function(done){
    
   await { 
      for(var i = 0; i < _n; i++){
         async.echo(defer(var x[], y[]), i, i*2);
      }
   }

   expected(x, y); done();

});

test("array notation simple let", function(done){
    
   await { 
      for(var i = 0; i < _n; i++){
         async.echo(defer(let x[], y[]), i, i*2);
      }
   }

   expected(x, y, done);

});

test("array notation simple const", function(done){
    
   await { 
      for(var i = 0; i < _n; i++){
         async.echo(defer(const x[], y[]), i, i*2);
      }
   }

   expected(x, y, done);

});

test("array notation parallel raw", function(done){
   let x;    
   await { 
      for(var i = 0; i < _n; i++){
         async.echo(defer(raw x[]), i, i*2);
      }
   }

   expected_raw(x, done);
});

test("array notation parallel raw", function(done){
    
   await { 
      for(var i = 0; i < _n; i++){
         async.echo(defer(let raw x[]), i, i*2);
      }
   }

   expected_raw(x, done); 
});

test("array notation parallel raw hard lhs", function(done){
   var deep = { a: { b: { x: "", y: "" } } };

   await { 
      for(var i = 0; i < _n; i++){
         async.echo(defer(raw deep.a.b.x[]), i, i*2);
      }
   }

   expected_raw(deep.a.b.x, done);
});



// DOCUMENT: looks like it shouldn't work
// works because control structures get suspended in whole async function
test("array notation serial", function(done){

   var x = []; var y = [];

   // works because control structures get suspended in whole async function
   for(var i = 0; i < _n; i++){
      await { 
         async.echo(defer(x[i], y[i]), i, i*2);
      }
   }

   expected(x, y, done);
});

// DOCUMENT: weird one. document with above.
// looks like the one above but doesn't work because _.each iterator is a new function context
// works but there is no way to get the results
// this is just a poorly structured parallel pattern
// you can achieve the same thing wrapping the whole each and using array notation
test("array notation serial each", function(done){

   var x = []; var y = [];

   _.each(_.range(_n), function(i){
      await { 
         async.echo(defer(x[i], y[i]), i, i*2);
      }
   });

   setTimeout(function(){
      expected(x, y, done);
   }, ((_n+1) * 10));
});

test("array notation serial complex lhs", function(done){

   var hard = { foo : { bar: [ { baz : [] } ] } };

   for(var i = 0; i < _n; i++){
      await { 
         async.echo(defer(hard.foo["bar"][0].baz[i]), i, i*2);
      }
   }

   eq(hard.foo["bar"][0].baz, expected_x);

   done();
});

test("array notation serial each async", function(done){

   let foo = { x: [] };
   let y = [];
   let ignore = [];

   await{
      _.each.async(_.range(_n), function(i, v, next){
         await { async.echo(defer(foo.x[i], ignore), i, i*2); }
         await { async.echo(defer(ignore, y[i]), i, i*2); }
         next();
      }, defer());
   }

   expected(foo.x, y, done);
});

test("array notation hard lhs", function(done){

   var deep = { a: { b: { x: "", y: "" } } };
    
   await { 
      for(var i = 0; i < _n; i++){
         async.echo(defer(deep.a.b.x[], deep.a.b.y[]), i, i*2);
      }
   }

   expected(deep.a.b.x, deep.a.b.y, done);

});

test("array notation serial parallel each async", function(done){

   let foo = { x: [] };
   let y = [];
   let ignore = [];

   await{
      _.each.async(_.range(_n), function(i, v, next){
         await { 
            async.echo(defer(foo.x[i], ignore), i, i*2);
            async.echo(defer(ignore, y[i]), i, i*2); 
         }
         next();
      }, defer());
   }

   expected(foo.x, y, done);
});

test("array notation parallel", function(done){
    
   await { 
      for(var i = 0; i < _n; i++){
         async.echo(defer(let x[], y[]), i, i*2);
      }
   }

   expected(x, y, done);
});

test("array notation parallel previous declaration", function(done){
    
   let x, y;

   await { 
      for(var i = 0; i < _n; i++){
         async.echo(defer(x[], y[]), i, i*2);
      }
   }

   expected(x, y, done);
});

test("array notation parallel each", function(done){

   await { 
      _.each(_.range(_n), function(i){
         async.echo(defer(let x[], y[]), i, i*2);
      });
   }

   expected(x, y, done);
});

// DOCUMENT THIS: weird one, because you can't have duplicate defers with [] notation in one await. this is a work around.
test("array notation multiple parallel each", function(done){
    
   var abs = timer();

   await { 
      _.each(_.range(_n), function(i){
         (function(cb){
            var t = timer();
            await{
               async.echo(50, defer(let x, y), i, i*2);
               async.echo(100, defer(let xx, yy), i*3, i*4);
            }
            t(100, 20); // would be minimum 150 if they ran serial
            cb(x, y, xx, yy);
         })(defer(let x[], y[], xx[], yy[]))
      });
   }

   // TODO: I THINK YOU CAN DO THIS
   // you just need to keep track of the index and update the runtime to take cb(true, 0) and cb(true, 1)
   // although i've literally never needed to do this, and we have a work around. this can go in the nice to have column.

   // would be equivalent to this, but this doesn't work.
   // await { 
   //    _.each(_.range(_n), function(i){
   //       async.echo(defer(let x[], y[]), i, i*2);
   //       async.echo(defer(let xx[], yy[]), i*3, i*4);
   //    });
   // }


   abs(100, 50); // would be minimum _n * 100 if they ran serial

   eq(x, expected_x);
   eq(y, expected_y);
   eq(xx, _.map(_.range(_n), function(n){ return(n*3); }));
   eq(yy, _.map(_.range(_n), function(n){ return(n*4); }));

   done();
});

