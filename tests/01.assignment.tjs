"use strict";

var { _, eq, ok, async } = require('./common.js');

/*
test("a test of fulfill values", function(done){

   for(var i = 0; i < 20; i++){
      var x = 3 * Math.random();
      await{ async.echo(defer(var y, z), x, 2); }
      eq(x, y);
      eq(z, 2);
   }

   done();
});

test("assign to array index", function(done){

   var a = [];

   await{ async.echo(defer(a[0], a[1], a[2]), 0, 1, 2); }

   eq(a, [0, 1, 2]);

   done();
});

test("assign to object key", function(done){

   var o = {};

   await{ async.echo(defer(o.zero, o.one, o.two), 0, 1, 2); }

   eq(o, { zero: 0, one: 1, two: 2 });

   done();
});

*/

/*
test("test capture of defer slots", function(done){

   var slots = {};
   var n = 10;

   var slots = [], x = {}, jams = []; 

   var hard = { foo : { bar: [ { baz : [] } ] } };

   function helper(i, cb){
      await{ setTimeout(defer(), i); }
      return cb(i, 7*i, 2*i, 3*i);
   }

   for (var i = 0; i < n; i++) {
      x[i] = i;
   }

   var dummy = { puppy : 0 };

   await {
      for (var i = 0; i < n; i++) {
         helper(i, defer(
            slots[x[i]],
            dummy.puppy, jams[i], 
            hard.foo["bar"][0].baz[i]
         ));
      }
   }

   for (var i = 0; i < n; i++){
      _.p("i.0: ", i);
      eq(slots[i], i);
      _.p("i.1: ", i);
      eq(jams[i], i*2);
      _.p("i.2: ", i);
      eq(hard.foo.bar[0].baz[i], i*3);
      _.p("i.3: ", i);
    }

    done();
});
*/

/*
const n = 10;
const expected_combined = _.map(_.range(n), function(v){ return([v, v*2]); });
const expected_one = _.map(_.range(n), function(v){ return([v]); });
const expected_two = _.map(_.range(n), function(v){ return([v*2]); });

test("array notation serial", function(done){

   var x = [];

   for(var i = 0; i < n; i++){
      await { 
         async.echo(defer(x[i]), i, i*2);
      }
   }

   eq(x, expected_one);

   done();
});

test("array notation serial each", function(done){

   let x = [];

   _.each(_.range(n), function(i){
      await { 
         async.echo(defer(x[i]), i, i*2);
      }
   });

   eq(x, expected_one);
   done();

});
*/


/*

test("array notation", function(done){
    
   var x = [];

   for(var i = 0; i < n; i++){
      await { 
         async.echo(defer(x[i]), i, i*2);
      }
   }

   eq(x, expected);

   done();

});


test("array notation", function(done){
    
   await { 
      for(var i = 0; i < n; i++){
         async.echo(defer(let x[], y[]), i, i*2);
      }
   }

   eq(x, _.range(n));
   eq(y, _.map(_.range(n), function(v){ return(v*2); }));

   done();

});

test("array notation raw", function(done){
    
   await { 
      for(var i = 0; i < n; i++){
         async.echo(defer(let raw x[]), i, i*2);
      }
   }

   var expected = _.map(_.range(n), function(v){ return([v, v*2]); });

   eq(x, expected);

   done();

});

test("array notation raw complex lhs", function(done){

   var hard = { foo : { bar: [ { baz : [] } ] } };

   for(var i = 0; i < n; i++){
      await { 
         async.echo(defer(hard.foo["bar"][0].baz[]), i, i*2);
      }
   }

   var expected = _.map(_.range(n), function(v){ return([v, v*2]); });

   eq(hard.foo["bar"][0].baz, expected);

   done();

});

test("array notation raw double indexed lhs", function(done){

   var outer = [];

   for(var j = 0; j < n; j++){
      for(var i = 0; i < n; i++){
         await { 
            async.echo(defer(outer[j][]), i, i*2);
         }
      }
   }

   var expected = _.map(_.range(n), function(v){
      return _.map(_.range(n), function(v){ return([v, v*2]); });
   });

   eq(outer, expected);

   done();

});

*/
