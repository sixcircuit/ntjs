"use strict";

var _ = require('dry-underscore');
var eq = _.test.eq;
var ok = _.test.ok;

var flag = false;

test("pass through / compile test", function(done){

   (function(cb){
      function make_dict () {
         for (var i = 0; i < 100; i++);
         var d = { cat : function (n, cb) {
            for (var i = 0; i < n; i++) {
               await { setTimeout (defer (), 5 * Math.random ()); }
            }
            cb ();
         }, n : 10 };
         for (var i = 0; i < 100; i++);
         return d;
      };

      var d = make_dict ();
      await { d.cat (d.n, defer ()); }
      flag = true;
      cb ();
   })(function(){
      ok(flag, "flag was set");
      done();
   });
});
// -*- mode: javascript; tab-width: 4; c-basic-offset: 4; indent-tabs-mode: nil; -*-

"use strict";

var assert = require ("assert");

var dec = 0.2, b = -.11, c = -1.222, d = 10000.111111, e = -1000;

exports["test that decimal literals compile"] = {

    run  : function (cb) {
        cb ();
    },

    check : function () {
      // This is a compilation test to make sure that decimal numbers work.
      // No runtime test is required.
    }

};

// -*- mode: javascript; tab-width: 4; c-basic-offset: 4; indent-tabs-mode: nil; -*-

"use strict";

var assert = require ("assert");

var sum = 0;
var i = 0;

exports["parsing and lexing of equalities"] = {

    run : function (cb) {
        if (1 === 1) { i++; }
        if (1 == 1) { i++; }
        if (1 != 2) { i++; }
        if (1 !== 2) { i++; }
        if (3 <= 4) { i++; }
        if (!!30) { i++; }
        if (5 >= 1) { i++; }
	cb();
    },

    check : function () {
	assert.equal (i, 7, "all 7 worked");
    }

};
// -*- mode: javascript; tab-width: 4; c-basic-offset: 4; indent-tabs-mode: nil; -*-

"use strict";

var slots = {};
var n = 40;
var assert = require ("assert");

exports["simple arguments test await"] = {
    
    run : function (cb) {

        function noAwait(callback){
            slots.noAwait = [];
            for(var i = 1; i < arguments.length; i++){
                slots.noAwait.push(arguments[i]);
            }
            callback();
        }

        function singleAwait(callback){
            slots.singleAwait = [];
            await { setTimeout (defer (), 1); }
            for(var i = 1; i < arguments.length; i++){
                slots.singleAwait.push(arguments[i]);
            }
            callback();
        }

        function doubleAwait(callback){
            slots.doubleAwait = [];
            await { setTimeout (defer (), 1); }
            (function(){
                await { setTimeout (defer (), 1); }
                for(var i = 0; i < arguments.length; i++){
                    slots.doubleAwait[i] = arguments[i];
                }
                callback();
            })(1, 2, 3);
        }

        function deepAwait(callback){
            slots.deepAwait = [];
            (function(){
                await { setTimeout (defer (), 1); }
                for(var i = 0; i < arguments.length; i++){
                    slots.deepAwait[i] = arguments[i];
                }
                callback();
            })(4, 5, 6);
        }

        await{ noAwait(defer(), "a", "b", "c"); }
        await{ singleAwait(defer(), "c", "d", "e"); }
        await{ doubleAwait(defer()); }
        await{ deepAwait(defer()); }

        cb();
    },
    
    check : function () {
        assert.deepEqual(slots.noAwait, ["a", "b", "c"]);
        assert.deepEqual(slots.singleAwait, ["c", "d", "e"]);
        assert.deepEqual(slots.doubleAwait, [1, 2, 3]);
        assert.deepEqual(slots.deepAwait, [4, 5, 6]);
    }
};
