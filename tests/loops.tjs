"use strict";

var _ = require('dry-underscore');
var eq = _.test.eq;
var ok = _.test.ok;

var slots = {};
var n = 40;
var assert = require ("assert");

test("simple parallel await", function(done){
    
   (function(cb){
      var i = 0;	
      while (i < n) {
         await { 
            setTimeout (defer (), 1); 
            setTimeout (defer (), 2); 
         }
         slots[i] = 1;
         i++;
      }
      cb();
   })(function(){
	    for (var i = 0; i < n; i++) {
	        ok(slots[i], "slot[" + i + "] is set");
	    }
       done();
    });
});
"use strict";

var _ = require('dry-underscore');
var eq = _.test.eq;
var ok = _.test.ok;

var n = 30;
var skip = 20;
var slots = {};

test("break and continue", function(done){

   (function(cb){
      var i = 0;
      while (1) {
         slots[i] = 0;
         await { setTimeout (defer (), 1); }

         if (i == skip) {
            i++;
            continue;
         }
         slots[i] = 1;
         i++;
         if (i == n) {
            break;
         }
      }
      cb();
   })(function(){
      var i = 0;
      for (i = 0; i < n; i++) {
         if (i != skip) {
            ok(slots[i], "iter " + i + ": all slots but skip=" + skip);
         } else {
            ok(!slots[i], "iter " + i + ":  all slots but skip=" + skip);
         }
      }
      ok(!slots[i], "stop at slot=" + n);
      done();
   });

});
"use strict";

var _ = require('dry-underscore');
var eq = _.test.eq;
var ok = _.test.ok;

var n = 30;
var skip = 20;
var slots = {};

test("break and continue label", function(done){

   (function(cb){
      var i = 0;
      foo : while (1) {
         slots[i] = 0;
         await { setTimeout (defer (), 1); }

         if (i == skip) {
            i++;
            continue foo;
         }
         slots[i] = 1;
         i++;
         if (i == n) {
            break foo;
         }
      }
      cb ();
   })(function(){
      var i = 0;
      for (i = 0; i < n; i++) {
         if (i != skip) {
            ok(slots[i], "iter " + i + ": all slots but skip=" + skip);
         } else {
            ok(!slots[i], "iter " + i + ":  all slots but skip=" + skip);
         }
      }
      ok (!slots[i], "stop at slot=" + n);
      done();
   });
});
"use strict";

var _ = require('dry-underscore');
var eq = _.test.eq;
var ok = _.test.ok;

var n = 30;
var skip = 20;
var slots = {};

test("break and continue for loop", function(done){

    (function (cb) {
	    var i = 0;
	    foo : while (1) {
	        slots[i] = 0;
	        await { setTimeout (defer (), 1); }
            
	        for (var j = 0; j < 10; j++) {
		        if (i == skip) {
		            i++;
		            continue foo;
		        }
		        slots[i] = 1;
		        i++;
		        if (i == n) {
		            break foo;
		        }
		        break;
	        }
	    }
	    cb ();
    })(function(){
	    var i = 0;
	    for (i = 0; i < n; i++) {
	        if (i != skip) {
		        ok(slots[i], "iter " + i + ": all slots but skip=" + skip);
	        } else {
		        ok(!slots[i], "iter " + i + ":  all slots but skip=" + skip);
	        }
	    }
	    ok(!slots[i], "stop at slot=" + n);
       done();
    });
});
"use strict";

var _ = require('dry-underscore');
var eq = _.test.eq;
var ok = _.test.ok;

var inlist = [ "dog", "cat", "bird", "seal", "donkey" ];
var outlist = [];

test("for..in iteration 00", function(done){

   (function(cb){
      for (var animal in inlist) {
         await { setTimeout (defer (), 10 * Math.random ()); }
         outlist.push (inlist[animal]);
      }
      cb ();
   })(function(){
      eq(inlist, outlist, "zoo equivalence");
      done();
   });

});
"use strict";

var _ = require('dry-underscore');
var eq = _.test.eq;
var ok = _.test.ok;

var listA = [];
var listB = [];


test("for..in iteration 01", function(done){

    (function(cb){
	    var i = 0;
	    for (i = 0; i < 10; i++) {
	        await { setTimeout (defer (), 10* Math.random ()); }
	        listA.push (i);
	    }
	    for ( ; i < 20; i++) {
	        listA.push (i);
	    }
	    while (true) {
	        if (i >= 30) {
		        break;
	        }
	        await { setTimeout (defer (), 10* Math.random ()); }
	        listA.push (i);
	        i++;
	    }
	    while (true) {
	        if (i >= 40) {
		        break;
	        }
	        listA.push (i);
	        i++;
	    }
	    cb ();
    })(function(){
	    for (var i = 0; i < 40; i++) { listB.push (i); }
	    eq(listA, listB, "list equivalence");
       done();
    });
});
"use strict";

var _ = require('dry-underscore');
var eq = _.test.eq;
var ok = _.test.ok;

var res = 0;
var i = 0;

test("another test of continue and break", function(done){
   (function (cb) {
      foo : while (i < 100) {
         await { setTimeout (defer (), 10*Math.random()); }

         if (i == 10) {
            i += 2;
            res |= (1 << 20);
            continue foo;
         }

         res |= (1 << i);

         if (i == 3) {
            i++;
            res |= (1 << 21);
         }

         if (i == 13) {
            res |= (1 << 22);
            break foo;
         }
         i++;
      }
      res |= (1 << 23);
      cb();
   })(function(){
      ok((res == 15741935 && i == 13), "all bits set!");
      done();
   });
});
"use strict";

var _ = require('dry-underscore');
var eq = _.test.eq;
var ok = _.test.ok;

var slots = {};
var n = 40;

test("test do..while...", function(done){

   (function(cb){
      var i = 0;	
      do {
         await { 
            setTimeout (defer (), 1); 
            setTimeout (defer (), 2); 
         }
         slots[i] = 1;
         i++;
      } while (i < n);
      cb();
   })(function(){
      for (var i = 0; i < n; i++) {
         ok(slots[i], "slot[" + i + "] is set");
      }
      done();
   });
});
// -*- mode: javascript; tab-width: 4; c-basic-offset: 4; indent-tabs-mode: nil; -*-

"use strict";

var assert = require ("assert");

var sum = 0;
var i = 0;

exports["another test of continue and break (no tame)"] = {

    run : function (cb) {

	while (i < 100) {
	    i++;

	    if (i == 4) {
		continue;
	    }
	    sum += i;

	    if (i == 10) { 
		break;
	    }
	}
	cb();
    },

    check : function () {
	assert.ok ((sum == 51 && i == 10), "continues / breaks ok!");
    }

};
