"use strict";

var { _, eq, ok, timer, async } = require('./common.js');

test("defer one nested var", function(done){

   await{ 
      await{
         await{ 
            async.echo(defer(var one), 1);
         }
      }
   }

   eq(one, 1);

   done();

});


test("defer many nested", function(done){

   var time = timer();

   await{ 
      await{ 
         async.echo(100, defer(var one), 1); 
      }
      time(100, 50);
      await{
         await{
            async.echo(200, defer(var two), 2); 
            async.echo(300, defer(var three_hundred), 300); 
         }
      }
      time(300, 50);
      async.echo(three_hundred, defer(var four), three_hundred);
   }
   time(300, 50);

   eq(one, 1);
   eq(two, 2);
   eq(three_hundred, 300);
   eq(four, 300);

   done();

});


// DOCUMENT: this is weird
test("defer many nested for", function(done){
   
   var time = timer();

   let x;

   await{ 
      for(var i = 0; i < 10; i++){
         await{ async.echo(100, defer(x[]), i); }
         // same as
         // await{ async.echo(10, defer(x), i); }
         // x = i, every time
      }
   }

   timer(1000, 50);

   // we get the last value of i, which is i. it's nonsensical, but it "works" as you'd expect.
   eq(x, [9]);

   done();

});
