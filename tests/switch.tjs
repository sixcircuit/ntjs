"use strict";

var _ = require('dry-underscore');
var eq = _.test.eq;
var ok = _.test.ok;

var results = [];

function blah(ev){ 
    await { setTimeout (defer (), 10*Math.random ()); }
    ev(); 
};

function runsw(x, cb){
    
    switch (x) {
    case 0:
	    await { blah (defer ()); }
	    results.push (0);
	    break;
    case 17:
    case 1:
	    await { blah (defer ()); }
	    results.push (1);
	    break;
    case 2:
	    await { blah (defer ()); }
	    results.push (2);
    case 18:
    case 3:
	    await { blah (defer ()); }
	    results.push (3);
    default:
	    await { blah (defer ()); }
	    results.push (4);
	    break;
    }
    cb ();
}

test("switch & case statement", function(done){
    (function (cb) {
	    var lst = [ 0, 1, 2, 3, 4, 18, 17];
	    for (var i in lst) {
	        await { runsw (lst[i], defer ()); }
	    }
	    cb ();
    })(function(){
	    eq(results, [0,1,2,3,4,3,4,4,3,4,1], "cascade check");
       done();
    });
});
// -*- mode: javascript; tab-width: 4; c-basic-offset: 4; indent-tabs-mode: nil; -*-

"use strict";

var assert = require ("assert");

var results = [];

function blah (ev) { 
    await { setTimeout (defer (), 10*Math.random ()); }
    ev(); 
};

function runsw (x, cb) {
    
    switch (x) {
    case "zero":
	    await { blah (defer ()); }
	    results.push (0);
	    break;
    case "seventeen":
    case "one":
	    await { blah (defer ()); }
	    results.push (1);
	    break;
    case "two":
	    await { blah (defer ()); }
	    results.push (2);
    case "eighteen":
    case "three":
	    await { blah (defer ()); }
	    results.push (3);
    default:
	    await { blah (defer ()); }
	    results.push (4);
	    break;
    }
    cb ();
}

exports["switch & case statement"] = {
    
    run : function (cb) {
	    var lst = [ "zero", "one", "two", "three", "four", 
                    "eighteen", "seventeen" ];
	    for (var i in lst) {
	        await { runsw (lst[i], defer ()); }
	    }
	    cb ();
    },
    
    check : function () {
	    assert.deepEqual (results, [0,1,2,3,4,3,4,4,3,4,1], "cascade check");
    }
    
};
