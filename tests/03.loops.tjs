"use strict";

var { _, eq, ok, async } = require('./common.js');

test("simple parallel await", function(done){
    
   var slots = {};

   let i = 0;	
   const n = 40;

   while(i < n){
      await { 
         async.echo(defer());
         async.echo(defer()); 
      }
      slots[i] = 1;
      i++;
   }

   for(let j = 0; j < n; j++) {
      ok(slots[j], "slot[" + j + "] is set");
   }

   done();
});

test("test nested serial/parallel", function(done){

   var slots = {};
   var n = 10;

   await {
      for (var i = 0; i < n; i++) {
         (function (cb) {
            var my_i = i;
            await { setTimeout (defer (), 5*Math.random ()); }
            await { setTimeout (defer (), 4*Math.random ()); }
            slots[my_i] = true;
            cb();
         })(defer ());
      }
   }

   for (var i = 0; i < n; i++) {
      ok(slots[i], "slots[" + i + "] is set!");
   }

   done();
});



test("break and continue", function(done){

   var n = 30;
   var skip = 20;
   var slots = {};

   let i = 0;

   while (1) {
      slots[i] = 0;
      await { async.echo(defer()); }
      if (i == skip) {
         i++;
         continue;
      }
      slots[i] = 1;
      i++;
      if (i == n) {
         break;
      }
   }

   for(i = 0; i < n; i++) {
      if (i != skip) {
         ok(slots[i], "iter " + i + ": all slots but skip=" + skip);
      } else {
         ok(!slots[i], "iter " + i + ":  all slots but skip=" + skip);
      }
   }

   ok(!slots[i], "stop at slot=" + n);

   done();
});

test("break and continue label", function(done){

   var n = 30;
   var skip = 20;
   var slots = {};

   var i = 0;

   foo : while (1) {
      slots[i] = 0;
      await { async.echo(defer()); }

      if (i == skip) {
         i++;
         continue foo;
      }
      slots[i] = 1;
      i++;
      if (i == n) {
         break foo;
      }
   }

   for (i = 0; i < n; i++) {
      if (i != skip) {
         ok(slots[i], "iter " + i + ": all slots but skip=" + skip);
      } else {
         ok(!slots[i], "iter " + i + ":  all slots but skip=" + skip);
      }
   }

   ok(!slots[i], "stop at slot=" + n);

   done();
});


test("break and continue for loop", function(done){

   var n = 30;
   var skip = 20;
   var slots = {};

   var i = 0;

   foo : while (1) {
      slots[i] = 0;
      await { async.echo(defer()); }

      for (var j = 0; j < 10; j++) {
         if (i == skip) {
            i++;
            continue foo;
         }
         slots[i] = 1;
         i++;
         if (i == n) {
            break foo;
         }
         break;
      }
   }

   for (i = 0; i < n; i++) {
      if (i != skip) {
         ok(slots[i], "iter " + i + ": all slots but skip=" + skip);
      } else {
         ok(!slots[i], "iter " + i + ":  all slots but skip=" + skip);
      }
   }

   ok(!slots[i], "stop at slot=" + n);

   done();
});

test("for..in iteration simple", function(done){

   var inlist = [ "dog", "cat", "bird", "seal", "donkey" ];
   var outlist = [];

   for (var animal in inlist) {
      await { async.echo(defer()); }
      outlist.push (inlist[animal]);
   }

   eq(inlist, outlist, "zoo equivalence");

   done();

});

test("for..in iteration complex", function(done){

   var actual = [];

    var i = 0;
    for (i = 0; i < 10; i++) {
        await { async.echo(defer()); }
        actual.push(i);
    }
    for ( ; i < 20; i++) {
        actual.push(i);
    }
    while (true) {
        if (i >= 30) {
           break;
        }
        await { async.echo(defer()); }
        actual.push(i);
        i++;
    }
    while (true) {
        if (i >= 40) {
           break;
        }
        actual.push(i);
        i++;
    }

    var expected = _.range(40);

    eq(actual, expected, "list equivalence");

    done();
});


test("another test of continue and break", function(done){

   var res = 0;
   var i = 0;

   foo : while (i < 100) {
      await { async.echo(defer()); }

      if (i == 10) {
         i += 2;
         res |= (1 << 20);
         continue foo;
      }

      res |= (1 << i);

      if (i == 3) {
         i++;
         res |= (1 << 21);
      }

      if (i == 13) {
         res |= (1 << 22);
         break foo;
      }
      i++;
   }
   res |= (1 << 23);

   ok((res == 15741935 && i == 13), "all bits set!");
   done();

});


test("test do..while...", function(done){

   var slots = {};
   var n = 40;

   var i = 0;	

   do {
      await { 
         async.echo(defer()); 
         async.echo(defer()); 
      }
      slots[i] = 1;
      i++;
   } while (i < n);

   for(i = 0; i < n; i++) {
      ok(slots[i], "slot[" + i + "] is set");
   }

   done();

});

test("another test of continue and break (no tame)", function(done){

   var sum = 0;
   var i = 0;

	while (i < 100) {
	    i++;

	    if (i == 4) {
		continue;
	    }
	    sum += i;

	    if (i == 10) { 
		break;
	    }
	}

   ok((sum == 51 && i == 10), "continues / breaks ok!");

   done();

});
